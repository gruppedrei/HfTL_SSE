import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DHParameterSpec;

public class DHAgreementAndDataEncryption implements Runnable {
	byte bob[], alice[];
	boolean doneAlice = false;
	byte[] ciphertext;

	BigInteger aliceP, aliceG;
	int aliceL;

	public synchronized void run() {
		if (!doneAlice) {
			doneAlice = true;
			System.out.println("Start alice...");
			doAlice();
		}
		else {
			System.out.println("Start bob...");
			doBob();
		}
	}

	public synchronized void doAlice() {
		try {
			// Step 1:  Alice generates a key pair
			
			System.out.println("[Alice] Step-1: generate  DH key pair ...");
			KeyPairGenerator kpg = KeyPairGenerator.getInstance("DH");
			kpg.initialize(1024);
			KeyPair kp = kpg.generateKeyPair();
			
			System.out.println("[Alice] DH key pair:\n");
			System.out.println("[Alice] Algorithm: "+kp.getPublic().getAlgorithm());
			System.out.println("[Alice] Format: "+kp.getPublic().getFormat());
			System.out.println("[Alice] Public Key: "+toHexString(kp.getPublic().getEncoded()));
			
			// Step 2:  Alice sends the public key and the Diffie-Hellman key parameters to Bob
			
			DHParameterSpec dhSpec = (
							(DHPublicKey) kp.getPublic()).getParams();
			
			/**
			 * aliceG: public (prime) base, known to Alice, Bob, and Eve. g = 5
			 * aliceP: public (prime) modulus, known to Alice, Bob, and Eve. p = 23
			 * aliceL: the size in bits, l, of the random exponent (private value).
			 */
			aliceG = dhSpec.getG();
			aliceP = dhSpec.getP();
			aliceL = dhSpec.getL();
			alice = kp.getPublic().getEncoded();
			
			
			
			
			System.out.println("[Alice] Step-2: make Alice's public key and DHParameterSpec available to Bob");
			notify();

			// Step 3:  Alice performs the first phase of the
			//		protocol with her private key
			KeyAgreement ka = KeyAgreement.getInstance("DH");
			ka.init(kp.getPrivate());
			System.out.println("[Alice] Step-3: perform the 1st. phase of DH Key Agreeement protocol with Alice's private key");
			
			// Step 4:  Alice performs the second phase of the
			//		protocol with Bob's public key
			System.out.println("[Alice] waiting for bob's DH public key");

			while (bob == null) {
				wait();
			}
			KeyFactory kf = KeyFactory.getInstance("DH");
			X509EncodedKeySpec x509Spec = new X509EncodedKeySpec(bob);
			PublicKey pk = kf.generatePublic(x509Spec);
			ka.doPhase(pk, true);
			System.out.println("[Alice] Step-4: perform the 2nd. phase of DH protocol with Bob's public key");

			// Step 5:  Alice can generate the secret key
			byte secret[] = ka.generateSecret();
			
			System.out.println("[Alice] Step-5: generates the secret key: "+ toHexString(secret));
			// Step 6:  Alice generates a DES key
			SecretKeyFactory skf = SecretKeyFactory.getInstance("DES");
			DESKeySpec desSpec = new DESKeySpec(secret);
			SecretKey key = skf.generateSecret(desSpec);
			System.out.println("[Alice] Step-6: generate a DES key using the symmetric secret.");
			System.out.println("[Alice] DES Key:" +toHexString(desSpec.getKey()));

			// Step 7:  Alice encrypts data with the key and sends
			//		the encrypted data to Bob
			Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
			c.init(Cipher.ENCRYPT_MODE, key);
			
			String plainText="Stand and unfold yourself";
			
			System.out.println("[Alice] Step-7: encrypt data<"+plainText+"> with the DES key using the DES key and send the data to Bob.");
			
			ciphertext = c.doFinal(plainText.getBytes());
			
			System.out.println("[Alice] encrypt data using the DES key and send to Bob.");
			notify();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public synchronized void doBob() {
		try {
			// Step 3:  Bob uses the parameters supplied by Alice
			//		to generate a key pair and sends the public key
			while (alice == null) {
				wait();
			}
			
			System.out.println("[Bob] Alice's public key and DHParameterSpec are availble for Bob.");
			
			KeyPairGenerator kpg = KeyPairGenerator.getInstance("DH");
			DHParameterSpec dhSpec = new DHParameterSpec(
								aliceP, aliceG, aliceL);
			kpg.initialize(dhSpec);
			KeyPair kp = kpg.generateKeyPair();
			bob = kp.getPublic().getEncoded();
			System.out.println("[Bob] generate a DH key pair: "+bob.toString());
			
			notify();

			// Step 5 part 1:  Bob uses his private key to perform the
			//		first phase of the protocol
			KeyAgreement ka = KeyAgreement.getInstance("DH");
			ka.init(kp.getPrivate());

			System.out.println("[Bob] use private key to perform the first phase of the protocol");
			// Step 5 part 2:  Bob uses Alice's public key to perform
			//		the second phase of the protocol.
			KeyFactory kf = KeyFactory.getInstance("DH");
			X509EncodedKeySpec x509Spec =
							new X509EncodedKeySpec(alice);
			PublicKey pk = kf.generatePublic(x509Spec);
			ka.doPhase(pk, true);
			
			System.out.println("[Bob] use Alice's public key to perform the second phase of the protocol.");
			//ka.doPhase(1, k

			// Step 5 part 3:  Bob generates the secret key
			byte secret[] = ka.generateSecret();

			System.out.println("[Bob] generates the secret key: "+ toHexString(secret));
			
			// Step 6:  Bob generates a DES key
			SecretKeyFactory skf = SecretKeyFactory.getInstance("DES");
			DESKeySpec desSpec = new DESKeySpec(secret);
			SecretKey key = skf.generateSecret(desSpec);
			System.out.println("[Bob] generate a DES key based on the secret key...");
			System.out.println("[Bob] DES Key:" +toHexString(desSpec.getKey()));
			// Step 8:  Bob receives the encrypted text and decrypts it
			Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
			c.init(Cipher.DECRYPT_MODE, key);
			while (ciphertext == null) {
				wait();
			}
			
			byte plaintext[] = c.doFinal(ciphertext);
			System.out.println("Bob decrpyt the data sent from Alice and it is '" + new String(plaintext)+"'");
			
			System.out.println("The decrypted data should be the same as the plain data from Alice before being encrypted.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/*
     * Converts a byte to hex digit and writes to the supplied buffer
     */
    private void byte2hex(byte b, StringBuffer buf) {
        char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8',
                            '9', 'A', 'B', 'C', 'D', 'E', 'F' };
        int high = ((b & 0xf0) >> 4);
        int low = (b & 0x0f);
        buf.append(hexChars[high]);
        buf.append(hexChars[low]);
    }
	/*
     * Converts a byte array to hex string
     */
    private String toHexString(byte[] block) {
        StringBuffer buf = new StringBuffer();

        int len = block.length;

        for (int i = 0; i < len; i++) {
             byte2hex(block[i], buf);
             if (i < len-1) {
                 buf.append(":");
             }
        }
        return buf.toString();
    }
	public static void main(String args[]) {
		DHAgreementAndDataEncryption test = new DHAgreementAndDataEncryption();
		
		new Thread(test).start();		// Starts Alice
		new Thread(test).start();		// Starts Bob
	}
}
